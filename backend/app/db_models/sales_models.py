# backend/app/db_models/sales_models.py
from sqlalchemy import Column, String, Date, Integer, Numeric, ForeignKey, DateTime, Time
from sqlalchemy.dialects.mysql import BIT
from sqlalchemy.orm import relationship
from .base import Base

class ArRequestListH(Base):
    __tablename__ = 'arrequestlisth'
    DocNo = Column(String(15), primary_key=True)
    Series = Column(String(3), nullable=False)
    DocDate = Column(Date, nullable=False)
    CollectorCode = Column(String(10), ForeignKey('mastercollector.Code'), nullable=False)
    TotalCustomer = Column(Integer, nullable=False)
    TotalDocument = Column(Integer, nullable=False)
    TotalValue = Column(Numeric(18, 4), nullable=False)
    Information = Column(String(255), nullable=False)
    Status = Column(String(20), nullable=False)
    PrintCounter = Column(Integer, nullable=False)
    PrintedBy = Column(String(16), nullable=True)
    PrintedDate = Column(DateTime, nullable=True)
    CreatedBy = Column(String(16), nullable=False)
    CreatedDate = Column(DateTime, nullable=False)
    ChangedBy = Column(String(16), nullable=False)
    ChangedDate = Column(DateTime, nullable=False)
    collector_ref = relationship("MasterCollector")
    customer_payments = relationship("CustomerPaymentH", back_populates="ar_request_list_ref")

class GoodsIssueH(Base):
    __tablename__ = 'goodsissueh'
    DocNo = Column(String(15), primary_key=True)
    Series = Column(String(3), nullable=False)
    DocDate = Column(Date, nullable=False)
    SODocNo = Column(String(15), ForeignKey('salesorderh.DocNo'), nullable=False)
    CustomerCode = Column(String(10), ForeignKey('mastercustomer.Code'), nullable=False)
    ShipToCode = Column(String(10), nullable=False)
    Location = Column(String(5), ForeignKey('masterlocation.Code'), nullable=False)
    Zone = Column(String(10), nullable=False)
    PONo = Column(String(50), nullable=False)
    VehicleNo = Column(String(10), nullable=False)
    PackingListNo = Column(String(15), nullable=False)
    ShipmentDocNo = Column(String(15), nullable=False)
    Information = Column(String(255), nullable=False)
    Status = Column(String(20), nullable=False)
    PrintCounter = Column(Integer, nullable=False)
    PrintedBy = Column(String(16), nullable=True)
    PrintedDate = Column(DateTime, nullable=True)
    CreatedBy = Column(String(16), nullable=False)
    CreatedDate = Column(DateTime, nullable=False)
    ChangedBy = Column(String(16), nullable=False)
    ChangedDate = Column(DateTime, nullable=False)
    sales_order = relationship("SalesOrderH", back_populates="goods_issues")
    sales_invoices = relationship("SalesInvoiceH", back_populates="goods_issue")
    details = relationship("GoodsIssueD", back_populates="header")
    location_ref = relationship("MasterLocation")

class SalesOrderH(Base):
    __tablename__ = 'salesorderh'
    DocNo = Column(String(15), primary_key=True)
    Series = Column(String(3), nullable=False)
    DocDate = Column(Date, nullable=False)
    CustomerCode = Column(String(10), ForeignKey('mastercustomer.Code'), nullable=False)
    ShipToCode = Column(String(10), nullable=False)
    TaxToCode = Column(String(10), ForeignKey('mastercustomer.Code'), nullable=False)
    SalesCode = Column(String(10), ForeignKey('mastersales.Code'), nullable=False)
    DeliveryDate = Column(Date, nullable=False)
    PONo = Column(String(50), nullable=False)
    TOP = Column(Integer, nullable=False)
    DiscPercent = Column(Numeric(18, 4), nullable=False)
    TaxStatus = Column(String(10), nullable=False)
    TaxPercent = Column(Numeric(18, 4), nullable=False)
    Currency = Column(String(3), ForeignKey('mastercurrency.Code'), nullable=False)
    ExchangeRate = Column(Numeric(18, 4), nullable=False)
    TotalGross = Column(Numeric(18, 4), nullable=False)
    TotalDisc = Column(Numeric(18, 4), nullable=False)
    TaxValue = Column(Numeric(18, 4), nullable=False)
    TotalNetto = Column(Numeric(18, 4), nullable=False)
    PPhStatus = Column(String(10), nullable=False)
    CutPPh = Column(BIT, nullable=False)
    PPhPercent = Column(Numeric(18, 4), nullable=False)
    PPhValue = Column(Numeric(18, 4), nullable=False)
    Information = Column(String(255), nullable=False)
    Status = Column(String(20), nullable=False)
    IsPurchaseReturn = Column(BIT, nullable=False)
    IsApproved = Column(BIT, nullable=False)
    ApprovedBy = Column(String(16), nullable=True)
    ApprovedDate = Column(DateTime, nullable=True)
    CreatedBy = Column(String(16), nullable=False)
    CreatedDate = Column(DateTime, nullable=False)
    ChangedBy = Column(String(16), nullable=False)
    ChangedDate = Column(DateTime, nullable=False)
    customer = relationship("MasterCustomer", foreign_keys=[CustomerCode], back_populates="sales_orders")
    tax_to_customer_ref = relationship("MasterCustomer", foreign_keys=[TaxToCode], back_populates="tax_to_sales_orders")
    sales_person_ref = relationship("MasterSales", back_populates="sales_orders")
    details = relationship("SalesOrderD", back_populates="header", cascade="all, delete-orphan")
    goods_issues = relationship("GoodsIssueH", back_populates="sales_order")
    sales_invoices = relationship("SalesInvoiceH", back_populates="sales_order")

class SalesOrderD(Base):
    __tablename__ = 'salesorderd'
    DocNo = Column(String(15), ForeignKey('salesorderh.DocNo'), primary_key=True)
    Number = Column(Integer, primary_key=True)
    MaterialCode = Column(String(20), ForeignKey('mastermaterial.Code'), nullable=False)
    Info = Column(String(1024), nullable=False)
    Unit = Column(String(5), ForeignKey('masterunit.Code'), nullable=False)
    Qty = Column(Numeric(18, 4), nullable=False)
    Price = Column(Numeric(18, 4), nullable=False)
    Gross = Column(Numeric(18, 4), nullable=False)
    DiscPercent = Column(Numeric(18, 4), nullable=False)
    DiscPercent2 = Column(Numeric(18, 4), nullable=False)
    DiscPercent3 = Column(Numeric(18, 4), nullable=False)
    DiscValue = Column(Numeric(18, 4), nullable=False)
    DiscNominal = Column(Numeric(18, 4), nullable=False)
    Netto = Column(Numeric(18, 4), nullable=False)
    QtyDelivered = Column(Numeric(18, 4), nullable=False)
    QtyWO = Column(Numeric(18, 4), nullable=False)
    QtyBooked = Column(Numeric(18, 4), nullable=False)
    PromoQty = Column(Numeric(18, 4), nullable=False)
    header = relationship("SalesOrderH", back_populates="details")
    material = relationship("MasterMaterial")
    unit_ref = relationship("MasterUnit")

class SalesInvoiceH(Base):
    __tablename__ = 'salesinvoiceh'
    DocNo = Column(String(15), primary_key=True)
    Series = Column(String(3), nullable=False)
    DocDate = Column(Date, nullable=False)
    SODocNo = Column(String(15), ForeignKey('salesorderh.DocNo'), nullable=False)
    GIDocNo = Column(String(15), ForeignKey('goodsissueh.DocNo'), nullable=False)
    Location = Column(String(5), ForeignKey('masterlocation.Code'), nullable=False)
    PONo = Column(String(50), nullable=False)
    CustomerCode = Column(String(15), ForeignKey('mastercustomer.Code'), nullable=False)
    TaxToCode = Column(String(15), ForeignKey('mastercustomer.Code'), nullable=False)
    SalesCode = Column(String(10), ForeignKey('mastersales.Code'), nullable=False)
    TOP = Column(Integer, nullable=False)
    Currency = Column(String(3), ForeignKey('mastercurrency.Code'), nullable=False)
    ExchangeRate = Column(Numeric(18, 4), nullable=False)
    TaxStatus = Column(String(10), nullable=False)
    TaxPercent = Column(Numeric(18, 4), nullable=False)
    TaxPrefix = Column(String(3), nullable=False)
    TaxNo = Column(String(25), nullable=False)
    DiscPercent = Column(Numeric(18, 4), nullable=False)
    TotalGross = Column(Numeric(18, 4), nullable=False)
    TotalDisc = Column(Numeric(18, 4), nullable=False)
    DownPayment = Column(Numeric(18, 4), nullable=False)
    TaxValue = Column(Numeric(18, 4), nullable=False)
    TaxValueInTaxCur = Column(Numeric(18, 4), nullable=False)
    TotalNetto = Column(Numeric(18, 4), nullable=False)
    TotalCost = Column(Numeric(18, 4), nullable=False)
    PPhStatus = Column(String(10), nullable=False)
    CutPPh = Column(BIT, nullable=False)
    PPhPercent = Column(Numeric(18, 4), nullable=False)
    PPhValue = Column(Numeric(18, 4), nullable=False)
    Information = Column(String(255), nullable=False)
    Status = Column(String(20), nullable=False)
    PrintCounter = Column(Integer, nullable=False)
    PrintedBy = Column(String(16), nullable=True)
    PrintedDate = Column(DateTime, nullable=True)
    CreatedBy = Column(String(16), nullable=False)
    CreatedDate = Column(DateTime, nullable=False)
    ChangedBy = Column(String(16), nullable=False)
    ChangedDate = Column(DateTime, nullable=False)

    customer = relationship("MasterCustomer", foreign_keys=[CustomerCode], back_populates="sales_invoices")
    tax_to_customer_ref = relationship("MasterCustomer", foreign_keys=[TaxToCode], back_populates="tax_to_sales_invoices")
    sales_order = relationship("SalesOrderH", back_populates="sales_invoices")
    goods_issue = relationship("GoodsIssueH", back_populates="sales_invoices")
    location_ref = relationship("MasterLocation")
    sales_person_ref = relationship("MasterSales", back_populates="sales_invoices")
    details = relationship("SalesInvoiceD", back_populates="header", cascade="all, delete-orphan")
    ar_books = relationship("Arbook", primaryjoin="foreign(Arbook.DocNo) == SalesInvoiceH.DocNo", back_populates="sales_invoice_ref_explicit")

class SalesInvoiceD(Base):
    __tablename__ = 'salesinvoiced'
    DocNo = Column(String(15), ForeignKey('salesinvoiceh.DocNo'), primary_key=True)
    Number = Column(Integer, primary_key=True)
    MaterialCode = Column(String(20), ForeignKey('mastermaterial.Code'), nullable=False)
    Info = Column(String(1024), nullable=False)
    TagNo = Column(String(10), primary_key=True)
    Unit = Column(String(5), ForeignKey('masterunit.Code'), nullable=False)
    Qty = Column(Numeric(18, 4), nullable=False)
    Price = Column(Numeric(18, 4), nullable=False)
    Gross = Column(Numeric(18, 4), nullable=False)
    DiscPercent = Column(Numeric(18, 4), nullable=False)
    DiscPercent2 = Column(Numeric(18, 4), nullable=False)
    DiscPercent3 = Column(Numeric(18, 4), nullable=False)
    DiscValue = Column(Numeric(18, 4), nullable=False)
    DiscNominal = Column(Numeric(18, 4), nullable=False)
    Netto = Column(Numeric(18, 4), nullable=False)
    Cost = Column(Numeric(18, 4), nullable=False)
    header = relationship("SalesInvoiceH", back_populates="details")
    material = relationship("MasterMaterial")
    unit_ref = relationship("MasterUnit")

class Arbook(Base):
    __tablename__ = 'arbook'
    Periode = Column(Date, primary_key=True)
    CustomerCode = Column(String(15), ForeignKey('mastercustomer.Code'), primary_key=True)
    TransType = Column(String(20), ForeignKey('mastertransactiontype.Type'), primary_key=True)
    DocNo = Column(String(40), primary_key=True)
    DocDate = Column(Date, nullable=False)
    TOP = Column(Integer, nullable=False)
    DueDate = Column(Date, nullable=False)
    Currency = Column(String(3), ForeignKey('mastercurrency.Code'), nullable=False)
    ExchangeRate = Column(Numeric(18, 4), nullable=False)
    Information = Column(String(255), nullable=False)
    DC = Column(String(1), nullable=False)
    DocValue = Column(Numeric(18, 4), nullable=False)
    DocValueLocal = Column(Numeric(18, 4), nullable=False)
    PaymentValue = Column(Numeric(18, 4), nullable=False)
    PaymentValueLocal = Column(Numeric(18, 4), nullable=False)
    ExchangeRateDiff = Column(Numeric(18, 4), nullable=False)
    # relational fields :
    customer = relationship("MasterCustomer")
    transaction_type_ref = relationship("MasterTransactionType")
    currency_ref = relationship("MasterCurrency") # Tambahkan ini
    sales_invoice_ref_explicit = relationship(
        "SalesInvoiceH", 
        primaryjoin="foreign(Arbook.DocNo) == SalesInvoiceH.DocNo", 
        back_populates="ar_books",
        uselist=False 
    )

class CustomerPaymentH(Base):
    __tablename__ = 'customerpaymenth'
    DocNo = Column(String(15), primary_key=True)
    Series = Column(String(3), nullable=False)
    DocDate = Column(Date, nullable=False)
    ARReqListNo = Column(String(15), ForeignKey('arrequestlisth.DocNo'), nullable=False)
    TotalCustomer = Column(Integer, nullable=False)
    TotalDocument = Column(Integer, nullable=False)
    TotalPayment = Column(Numeric(18, 4), nullable=False)
    Information = Column(String(255), nullable=False)
    Status = Column(String(20), nullable=False)
    CreatedBy = Column(String(16), nullable=False)
    CreatedDate = Column(DateTime, nullable=False)
    ChangedBy = Column(String(16), nullable=False)
    ChangedDate = Column(DateTime, nullable=False)
    ar_request_list_ref = relationship("ArRequestListH", back_populates="customer_payments")
    details = relationship("CustomerPaymentD", back_populates="header", cascade="all, delete-orphan")

class CustomerPaymentD(Base):
    __tablename__ = 'customerpaymentd'
    DocNo = Column(String(15), ForeignKey('customerpaymenth.DocNo'), primary_key=True)
    TransactionType = Column(String(20), ForeignKey('mastertransactiontype.Type'), primary_key=True)
    CustomerCode = Column(String(10), ForeignKey('mastercustomer.Code'), primary_key=True)
    ARDocNo = Column(String(16), primary_key=True)
    DC = Column(String(1), nullable=False)
    Currency = Column(String(3), ForeignKey('mastercurrency.Code'), nullable=False)
    Payment = Column(Numeric(18, 4), nullable=False)
    ExchangeRate = Column(Numeric(18, 4), nullable=False)
    PaymentLocal = Column(Numeric(18, 4), nullable=False)
    TaxPrefix = Column(String(3), nullable=False)
    TaxNo = Column(String(25), nullable=False)
    Information = Column(String(255), nullable=True)
    header = relationship("CustomerPaymentH", back_populates="details")
    customer = relationship("MasterCustomer")
    transaction_type_ref = relationship("MasterTransactionType")

class SalesReturnH(Base):
    __tablename__ = 'salesreturnh'
    DocNo = Column(String(15), primary_key=True)
    Series = Column(String(3), nullable=False)
    DocDate = Column(Date, nullable=False)
    PODocNo = Column(String(15), nullable=False)
    GRDocNo = Column(String(15), nullable=False)
    SIDocNo = Column(String(15), nullable=False)
    CustomerCode = Column(String(10), ForeignKey('mastercustomer.Code'), nullable=False)
    CustomerTaxTo = Column(String(10), ForeignKey('mastercustomer.Code'), nullable=False)
    SalesCode = Column(String(10), nullable=False)
    Currency = Column(String(3), nullable=False)
    ExchangeRate = Column(Numeric(18, 4), nullable=False)
    TaxStatus = Column(String(10), nullable=False)
    TaxPercent = Column(Numeric(18, 4), nullable=False)
    TaxPrefix = Column(String(3), nullable=False)
    TaxNo = Column(String(25), nullable=False)
    TaxDate = Column(Date, nullable=False)
    DiscPercent = Column(Numeric(18, 4), nullable=False)
    TotalGross = Column(Numeric(18, 4), nullable=False)
    TotalDisc = Column(Numeric(18, 4), nullable=False)
    TaxValue = Column(Numeric(18, 4), nullable=False)
    TaxValueInTaxCur = Column(Numeric(18, 4), nullable=False)
    TotalNetto = Column(Numeric(18, 4), nullable=False)
    TotalCost = Column(Numeric(18, 4), nullable=False)
    Information = Column(String(255), nullable=False)
    Status = Column(String(20), nullable=False)
    PrintCounter = Column(Integer, nullable=False)
    PrintedBy = Column(String(16), nullable=True)
    PrintedDate = Column(DateTime, nullable=True)
    CreatedBy = Column(String(16), nullable=False)
    CreatedDate = Column(DateTime, nullable=False)
    ChangedBy = Column(String(16), nullable=False)
    ChangedDate = Column(DateTime, nullable=False)

    customer_ref = relationship("MasterCustomer", foreign_keys=[CustomerCode])
    customer_tax_to_ref = relationship("MasterCustomer", foreign_keys=[CustomerTaxTo])
    details = relationship("SalesReturnD", back_populates="header", cascade="all, delete-orphan")

class SalesReturnD(Base):
    __tablename__ = 'salesreturnd'
    DocNo = Column(String(15), ForeignKey('salesreturnh.DocNo'), primary_key=True)
    Number = Column(Integer, primary_key=True)
    MaterialCode = Column(String(20), ForeignKey('mastermaterial.Code'), primary_key=True)
    Info = Column(String(1024), nullable=False)
    TagNo = Column(String(10), primary_key=True)
    OriginalTagNo = Column(String(10), nullable=False)
    Unit = Column(String(5), ForeignKey('masterunit.Code'), nullable=False)
    Qty = Column(Numeric(18, 4), nullable=False)
    Price = Column(Numeric(18, 4), nullable=False)
    Gross = Column(Numeric(18, 4), nullable=False)
    DiscPercent = Column(Numeric(18, 4), nullable=False)
    DiscPercent2 = Column(Numeric(18, 4), nullable=False)
    DiscPercent3 = Column(Numeric(18, 4), nullable=False)
    DiscValue = Column(Numeric(18, 4), nullable=False)
    DiscNominal = Column(Numeric(18, 4), nullable=False)
    Netto = Column(Numeric(18, 4), nullable=False)
    Cost = Column(Numeric(18, 4), nullable=False)

    header = relationship("SalesReturnH", back_populates="details")
    material_ref = relationship("MasterMaterial")
    unit_ref = relationship("MasterUnit")